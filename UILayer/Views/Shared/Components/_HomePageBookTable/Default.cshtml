@model BookingCreateDTO

<section id="bookTable" class="book_section layout_padding">
    <div class="container">
        <div class="heading_container">
            <h2>
                Rezervasyon Yap
            </h2>
        </div>
        <div class="row">
            <!-- Form Alanı -->
            <div class="col-md-6">
                <div class="form_container">
                    @using (Html.BeginForm("Index", "BookATable", FormMethod.Post))
                    {
                        <div>
                            @Html.TextBoxFor(m => m.Name, new { @class = "form-control", placeholder = "Adınızı Girin" })
                            @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })
                        </div>
                        @Html.TextBoxFor(m => m.Phone, new
                            {
                                @class = "form-control",
                                placeholder = "Telefon Numaranız (Örn: 5XXXXXXXXX)",
                                type = "tel",
                                pattern = @"5\d{9}", // 5 ile başlar ve 9 rakam daha gelir (toplamda 10 rakam)
                                maxlength = "10", // maksimum 10 karakter
                                title = "Lütfen geçerli bir telefon numarası girin (5XXXXXXXXX)."
                            })
                        @Html.ValidationMessageFor(m => m.Phone, "", new { @class = "text-danger" })
                        <div>
                            @Html.TextBoxFor(m => m.Email, new { @class = "form-control", placeholder = "E-Mail Adresiniz", type = "email" })
                            @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                        </div>
                        <div>
                            @Html.DropDownListFor(m => m.PersonCount,
                                     new SelectList(Enumerable.Range(1, 10).Select(i => new { Value = i, Text = i }), "Value", "Text"),
                                     "Kaç Kişi?",
                                     new { @class = "form-control nice-select wide" })
                            @Html.ValidationMessageFor(m => m.PersonCount, "", new { @class = "text-danger" })
                        </div>
                        <div>
                            @Html.TextBoxFor(m => m.Date, new { @class = "form-control", type = "date" })
                            @Html.ValidationMessageFor(m => m.Date, "", new { @class = "text-danger" })
                        </div>
                        <div class="btn_box">
                            <button type="submit" class="btn btn-primary">Yerinizi Ayırtın</button>
                        </div>
                        @* <div>
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        </div> *@
                    }
                </div>
            </div>

            <!-- Harita Alanı -->
            <div class="col-md-6">
                <div id="map" style="height: 350px; width: 100%; border: 1px solid #ddd; border-radius: 8px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);"></div>
            </div>
        </div>
    </div>
</section>

<!-- Leaflet.js Kütüphaneleri -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

<!-- Harita Stili -->
<script>
    // Harita Oluşturma
    var map = L.map('map').setView([41.016430, 28.949360], 18); // Fatih, İstanbul koordinatları

    // Harita Katmanı Ekle
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);

    // İşaretçi Ekle
    L.marker([41.020437, 28.933882]).addTo(map)
        .bindPopup('Rezervasyon Lokasyonu: Fatih, İstanbul')
        .openPopup();
</script>

<!-- Telefon Numarası Kontrolü -->
<script>
        document.getElementById('Phone').addEventListener('input', function () {
        var phoneValue = this.value;
        var regex = /^5\d{9}$/; // 5 ile başlar ve 9 haneli
        if (!regex.test(phoneValue)) {
            this.setCustomValidity('Telefon numarası 5 ile başlamalı ve 10 haneli olmalıdır.');
        } else {
            this.setCustomValidity('');
        }
    });
</script>